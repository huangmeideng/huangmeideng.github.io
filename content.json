{"meta":{"title":"kinano的博客","subtitle":"kinano","description":"kinano的个人博客，发布一系列有趣的东西","author":"kinano","url":"http://kinano.top"},"pages":[{"title":"关于我","date":"2017-11-25T08:08:19.000Z","updated":"2017-11-30T17:38:02.067Z","comments":false,"path":"about/index.html","permalink":"http://kinano.top/about/index.html","excerpt":"","text":"一个喜欢画画的程序员一个喜欢足球的程序员一个喜欢倒腾的程序员一个来自胡建的程序员一个毕业于南京林业大学的程序员"},{"title":"分类","date":"2017-11-25T04:29:24.000Z","updated":"2017-11-25T07:49:12.043Z","comments":false,"path":"categories/index.html","permalink":"http://kinano.top/categories/index.html","excerpt":"","text":""},{"title":"我的相册","date":"2017-11-30T18:05:15.000Z","updated":"2017-11-30T18:10:50.763Z","comments":false,"path":"photos/index.html","permalink":"http://kinano.top/photos/index.html","excerpt":"","text":""},{"title":"music","date":"2017-11-30T18:05:00.000Z","updated":"2017-11-30T18:05:00.854Z","comments":true,"path":"music/index.html","permalink":"http://kinano.top/music/index.html","excerpt":"","text":""},{"title":"标签","date":"2017-11-25T05:24:36.000Z","updated":"2017-11-25T07:48:07.011Z","comments":false,"path":"tags/index.html","permalink":"http://kinano.top/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"使用GD库创建验证码","slug":"GD-veritf","date":"2017-12-07T08:52:11.000Z","updated":"2017-12-07T09:12:43.498Z","comments":true,"path":"2017/12/07/GD-veritf/","link":"","permalink":"http://kinano.top/2017/12/07/GD-veritf/","excerpt":"前言php语言为我们提供了大量的类库，其中就包括操作图像的GD库。使用GD库我们可以对图像进行各种各样的操作，现在，就让我们利用gd创建一个验证码。","text":"前言php语言为我们提供了大量的类库，其中就包括操作图像的GD库。使用GD库我们可以对图像进行各种各样的操作，现在，就让我们利用gd创建一个验证码。 关于使用GD库创建二维码一般遵循一下操作步骤。1.创建画布2.创建颜色画笔3.开始绘制4.输出或保存图片5.销毁图像资源 创建画布我们使用imagecreatetruecolor(\\$width,\\$height)函数来创建画布,其中\\$width,\\$height参数表示画布的宽与长度。 创建颜色画笔我们使用imagecolorallocate($image,$red,$green,$blue)函数创建画笔，其中\\$image参数表示图像资源,\\$red,\\$green和\\$blue参数代表画笔的色值，范围为0~255。 开始绘制在GD库中有很多方法可以用来绘制，现在我们通过imagettftext(\\$image,\\$size,\\$angle,\\$x,\\$y,\\$color,\\$fontfile,\\$text)函数来对画布进行绘制。其中参数\\$image表示图像资源,\\$size表示字体大小,\\$angle表示字体的倾斜角度,\\$x和\\$y表示字符在哪个位置,\\$color表示字符的颜色,\\$fontfile表示字符所用字体所在的目录,\\$text表示字符 输出或保存图像使用imagejpeg($image,$filename)函数，这个函数表示输出jpeg的图像，如果是gif或png的图像可以先判断图像类型。 销毁图像使用imagedestory($iamge)函数 具体代码如下123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475&lt;?php/** * Created by PhpStorm. * User: Huangmeidneg * Date: 2017-12-7 * Time: 12:00 *//** * 验证码的制作 */$width = 200;$height =40;$image = imagecreatetruecolor($width,$height);$white = imagecolorallocate($image,255,255,255);function returnRandColor($image)&#123; return imagecolorallocate($image,mt_rand(0,255),mt_rand(0,255),mt_rand(0,255));&#125;//$randcolor = imagecolorallocate($image,mt_rand(0,255),mt_rand(0,255),mt_rand(0,255));imagefilledrectangle($image,0,0,$width,$height,$white);$string = join(&apos;&apos;,array_merge(range(0,9),range(&apos;a&apos;,&apos;z&apos;),range(&apos;A&apos;,&apos;Z&apos;)));$length = 4;$fontfile = &apos;fonts/fzstk.ttf&apos;;/** * 绘制四个验证码 */for ($i = 0; $i &lt; $length; $i++)&#123; $size = mt_rand(20,30); $angle=mt_rand(-15,15); $fontwidth = imagefontwidth($size); $fontheight = imagefontheight($size); $randColor = returnRandColor($image); $x = ($width/$length)*$i+$fontwidth; $y = mt_rand($height/2,$height-$fontheight); $text = str_shuffle($string); imagettftext($image,$size,$angle,$x,$y,$randColor,$fontfile,$text[0]);&#125;/** * 添加点 */$countPiexl = 100;for ($i=0;$i&lt;$countPiexl;$i++)&#123; $randColor = returnRandColor($image); $x = mt_rand(0,$width); $y = mt_rand(0,$height); imagesetpixel($image,$x,$y,$randColor);&#125;/** * 添加线 */$lineCount = 5;for ($i=0;$i&lt;$lineCount;$i++) &#123; $randColor = returnRandColor($image); $x1 = mt_rand(0, $width); $y1 = mt_rand(0, $height); $x2 = mt_rand(0, $width); $y2 = mt_rand(0, $height); imageline($image, $x1, $y1, $x2, $y2, $randColor);&#125;/** * 绘制圆弧 */$arcCount = 5;for($i=0;$i&lt;$arcCount;$i++)&#123; $randColor = returnRandColor($image); $cx = mt_rand(0,$width); $cy = mt_rand(0,$height); $w = mt_rand(0,$width); $h = mt_rand(0,$height); $s = mt_rand(0,$width); $e = mt_rand(0,$height); imagearc($image,$cx,$cy,$w,$h,$s,$e,$randColor);&#125;header(&quot;content-type:image/jpeg&quot;);imagejpeg($image);imagedestroy($image);","categories":[{"name":"-学习笔记","slug":"学习笔记","permalink":"http://kinano.top/categories/学习笔记/"}],"tags":[{"name":"php","slug":"php","permalink":"http://kinano.top/tags/php/"},{"name":"学习笔记","slug":"学习笔记","permalink":"http://kinano.top/tags/学习笔记/"}]},{"title":"正则表达式","slug":"preg-learn","date":"2017-12-03T14:29:04.000Z","updated":"2017-12-03T15:59:41.392Z","comments":true,"path":"2017/12/03/preg-learn/","link":"","permalink":"http://kinano.top/2017/12/03/preg-learn/","excerpt":"正则表达式是一种描述字符排列方式的一种语法规则，在程序开发中经常用于字符串地操作。如果你需要编写一个爬虫程序，对正则表达式的了解是非常有必要的。既然正则表达式是一种语法，自然有其编写语法，现在就让我们开始了解吧。","text":"正则表达式是一种描述字符排列方式的一种语法规则，在程序开发中经常用于字符串地操作。如果你需要编写一个爬虫程序，对正则表达式的了解是非常有必要的。既然正则表达式是一种语法，自然有其编写语法，现在就让我们开始了解吧。正则表达式主要由一下四个部分构成： 一.定界符二.原子三.元子符四.模式修正符一.定界符定界符用来标记正则表达式的范围，除了数字，字母和反斜杠(\\)外其他字符都可以当作定界符。当然了，除了特殊请客，一般使用”\\/\\/“。一下为一个标准正则表达式的书写方式：“/原子和元字符/模式修正符”二.原子原子是正则表达式最基本的单元，而且一个正则表达式必须包含至少一个原子。原子有一下几种类型：2.1 所有打印和非打印的字符其中打印字符指通过键盘可以显示到屏幕上的字符；非打印指空格，换行，制表等字符。2.2 *,.,+,\\?,\\&lt;,>,(,)等有特殊意义的字符若要当作原子则应在其前面加上转义字符\\。2.3 其它代表范围的原子\\d: 表示任意一个十进制的数字\\D: 表示任意一个除数字之外的字符\\s: 表示任意一个空白字符(空格,回车,换行等)\\S: 表示任意一个非空白字符\\w: 表示任意一个字(a-&gt;z,A-&gt;Z,下划线)\\W: 表示任意一个非字2.4 自定义一个原子表通过使用”[]”,表示可匹配括号中的任意一个原子比如:/[1245]/ 表示匹配1，2，4，5/[a-z]/ 表示匹配a到z的任意字母在[]中的第一个字符前面添加”\\^”表示非，比如\\d 等于 [0-9]\\D 等于 [^0-9]\\s 等于 [\\n\\r\\t\\f]\\S 等于 [^\\n\\r\\t\\f]\\w 等于 [a-zA-Z_]\\W 等于 [^a-zA-Z_]元字符元字符是一种特殊的字符，用于修饰原子，不能单独使用。有常见一下元字符：* 表示其前面的原子可以出现0次,1次或多次+ 表示其前面的原子可以出现1次或多次\\? 表示其前面的原子可以出现1次或0次. 表示除换行符之外的任意字符{} 用于自己定义其前面原子的出现次数。比如:{m} /89{6}8/ 表示9要出现6次{m,n} 表示至少出现m次，至多出现n次{m,} 表示至少出现m次{,n} 表示至多出现n次^ 在正则表达式的第一个字符之前出现，表示以该字符开头。比如 /\\^one/ 表示以one开头。$ 在正则表达式的最后一个字符之后出现，表示一该字符结束。 比如 /one\\$/ 表示以one结尾| 表示或的关系，比如/one|two/表示one与two的关系\\b 表示一个边界，比如:/\\bis\\b/可以匹配”this is island”中的”is”\\B 表示非边界,比如：/\\Bis\\b/可以匹配”this is island”中的”this”() 可以作为大原子使用；改变优先级；作为子模式使用等模式修正符模式修正符用来对一边写完成的表达式进行功能完善或扩展，使用方式为如下“/原子与元子符/模式修正符”有一下常用的模式修正符i 表示不区分大小写、m 默认情况下视为一行，添加该修正符可以识别换行s 将多行视为单行x 表示空白可以忽略不计A 表示必须以什么开头Z 表示必须以什么结尾U 可以阻止正则表达式的贪婪模式","categories":[{"name":"-学习笔记","slug":"学习笔记","permalink":"http://kinano.top/categories/学习笔记/"}],"tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://kinano.top/tags/学习笔记/"}]},{"title":"PHP面向对象","slug":"PHP-OOP","date":"2017-12-02T07:55:09.000Z","updated":"2017-12-02T15:05:49.668Z","comments":true,"path":"2017/12/02/PHP-OOP/","link":"","permalink":"http://kinano.top/2017/12/02/PHP-OOP/","excerpt":"前言自从php进入5.0版本以来，PHP开始全面地支持面向对象编程。嗯，谁说php很low。我们专注web开发好不好；谁说php代码烂，自己水平不行写的代码当然烂了；谁说php框架不优雅的，你用过laravel吗。好了，进入正题，面向对象的三大特性分别是封装性，继承性以及多态性，使用面向对象开发，让我们的程序可维护以及扩展性大大提高。","text":"前言自从php进入5.0版本以来，PHP开始全面地支持面向对象编程。嗯，谁说php很low。我们专注web开发好不好；谁说php代码烂，自己水平不行写的代码当然烂了；谁说php框架不优雅的，你用过laravel吗。好了，进入正题，面向对象的三大特性分别是封装性，继承性以及多态性，使用面向对象开发，让我们的程序可维护以及扩展性大大提高。 基本知识类:具有相同属性或方法的一类集合体。比如雪佛兰汽车是一个雪佛兰汽车类，奔驰汽车是一个奔驰汽车类，宝马汽车是一个宝马汽车类，而这三个类又是汽车大类的子类。 对象:类的一个具体实现，比如宝马Q5就是宝马汽车类的一个具体实现。对象地使用是放在内存中的。一下让我们了解一下对象在内存中的分配 使用面向对象，就是灵活地使用以上两个知识点。让我们来创建和使用类与对象123456789101112131415161718192021&lt;?php /** *新建一个类 */ class newClass&#123; public $a; public $b; public function funA()&#123; echo &quot;I am function A&quot;; &#125; public function funB()&#123; echo &quot;I am function B&quot;; &#125; &#125; /** *使用类创建对象 */ $opt=new newClass(); $opt-&gt;a=&quot;opt&quot;;//将opt对象中的a属性赋值为opt $opt-&gt;funA();//打印出&quot;I am function A&quot;?&gt; 修饰符:在定义类与类中的属性时，我们可以使用如下三个修饰符，若不加，则默认为publicpublic:权限最大protected:权限范围在其本身与其子类private:权限范围仅在其本身 构造函数与析构函数:在我们对类实例化创建对象时，往往需要对对象进行初始化，这时，我们就需要在类中定义一个构造方法。当我们使用完对象时，就需要释放对象，以减少内存的使用，这时我们就需要使用析构方法。在php中我们使用__construct()方法与__destruct()，如下代码1234567891011121314&lt;?php class newClass&#123; public $a; public $b; public function __construct($a,$b)&#123; $this-&gt;a=$a; $this-&gt;b=$b; echo &quot;我是构造函数&quot;; &#125; public function __destruct()&#123; echo &quot;我是析构函数&quot;; &#125; &#125;?&gt; 封装性当我们开发一些重要的程序模块时，常常不希望别人能轻易访问这些程序模块的数据，因此需要对这些数据进行封装。这时我们要进行数据的访问控制，常常使用private关键字来对这些属性与方法进行封装。如下123456789&lt;?php class privateClass&#123; private $a; private $b; private function privateFun()&#123; echo &quot;我是封装的方法&quot;; &#125; &#125;?&gt; 这样，当我们创建对象时就不能调用私有的属性与方法。但是我们可以通过使用魔术方法来对这些私有属性与方法进行访问。 __set()与__get()的使用通过__set()方法我们可以通过对象直接设置成员属性值通过__get()方法我们可以通过对象直接获取成员属性值123456789101112131415&lt;?php class setClass&#123; private $a; private $b=&quot;ww&quot;; public function __set($oldValue,$newvalue)&#123; $this-&gt;$oldValue=$newvalue; &#125; public function __get($newvalue)&#123; return $newvalue; &#125; &#125; $opt= new setClass(); $opt-&gt;a=&quot;sss&quot;;//直接设置私有属性值 echo $opt-&gt;b;//直接读取私有属性值?&gt; __isset()与__unset()的使用通过__isset()直接查看对象中私有属性是否存在通过__unset()直接删除对象中的私有属性1234567891011121314151617181920&lt;?php class issetClass&#123; private $a; private $b=&apos;www&apos;; function __isset($privateName)&#123; if(isset($privateName))&#123; return 1; &#125; else&#123; return 0; &#125; &#125; function __unset($privateName)&#123; echo &quot;销毁&quot;.$privateName; &#125; &#125; $opt = new issetClass(); echo isset($opt-&gt;$b); var_dump(unset($opt-&gt;$b));?&gt; 继承性当我们编写多个类时，常常多个类具有相同的属性与方法，为了简化代码我们引入了继承的概念，子类可以继承父类的一些属性与方法，减少了冗余代码地编写。 如何编写继承类 我们使用关键字extends来编写子类 12345678&lt;?phpclass parentClass&#123;&#125;class childClass extends parentClass&#123;&#125;?&gt; 如上，childClass是parentClass的子类，php仅支持单继承，即一个子类只有一个父类，但父类可以有多个子类。 重写父类方法 当父类中的方法不能满足子类的使用时我们可以重写父类方法。但当我们又想在子类使用父类的方法时，我们可以使用如下语法:parent::方法名 几个重要的关键字3.1 final final可以修饰类与方法，不能修饰成员属性； 被final修饰的类不能继承，而用final修饰的方法在子类中不能被重写3.2 static static可以修饰成员属性与成员方法，不能修饰类； 使用static修饰的成员与方法可以通过类直接使用，使用如下语法：类名::\\$属性名或方法名()； 在类中使用时通过如下语法:self::\\$属性名或方法名.3.3 const 在类中声明常量使用const,而不是使用define(); 比如 const TT=90 当使用常量时直接使用如下语法self::常量名3.4 instanceof 使用该关键字可以检测某个实例是否是某个类的实例。3.5 trait php只能进行单继承，但它同时提供了另类方式来进行代码复用，解决单继承问题。 如下 123456789101112&lt;?php trait testA&#123; function a()&#123;&#125; &#125; trait testB&#123; function b()&#123;&#125; &#125; class testC&#123; use testA,testB; function c()&#123;&#125; &#125; ?&gt; 抽象技术用abstract关键字修饰的方法与类称为抽象方法或抽象类。声明抽象类与抽象方法12345678910111213141516171819202122&lt;?php abstract class testClass&#123; $a; $b; abstract function testFun(); abstract function testFun1(); public function optFun()&#123; echo &quot;抽象类中的抽象方法&quot;; &#125;//抽象类可以有非抽象方法 &#125; class childClass extends testClass&#123; function testFun()&#123; echo &quot;子类中实现抽象方法&quot;; &#125; function testFun1()&#123; echo &quot;子类实现抽象方法&quot;; &#125; &#125; abstract child1Class extends testClass&#123; &#125;//子类是抽象方法可以不实现父类的抽象方法?&gt; 抽象技术为子类的声明提供了一种规范，限制了类的实例化(抽象类不能实例化)。 接口技术接口是一种特殊的抽象类，接口中只能声明抽象类与常量。声明接口使用interface,实现接口使用implements,修饰符只能是默认的public;一个子类可以继承多个接口,同时继承一个父类123456789101112131415161718192021222324252627282930&lt;?php interface newInterface&#123; const V=12; abstract function fun1(); abstract function fun2(); &#125; interface newInterface1&#123; abstract function fun3(); abstract function fun4(); &#125; class parentClass&#123; function fun5()&#123; echo &quot;fun5&quot;; &#125; &#125; class optClass extends parentClass implements newInterface,newINterface1&#123; function fun1()&#123; echo &quot;fun1&quot;; &#125; function fun2()&#123; echo &quot;fun2&quot;; &#125; function fun3()&#123; echo &quot;fun3&quot;; &#125; function fun4()&#123; echo &quot;fun4&quot;; &#125; &#125;?&gt; 多态在php中多态地实现需要一个类通过多个子类地继承实现，如果一个类的方法在多个子类中重写并实现不同的功能，我们称之为多态。","categories":[{"name":"-php","slug":"php","permalink":"http://kinano.top/categories/php/"}],"tags":[{"name":"php","slug":"php","permalink":"http://kinano.top/tags/php/"},{"name":"学习笔记","slug":"学习笔记","permalink":"http://kinano.top/tags/学习笔记/"}]},{"title":"PHP中魔术方法的使用","slug":"magical-fun","date":"2017-11-30T15:38:57.000Z","updated":"2017-11-30T17:05:10.878Z","comments":true,"path":"2017/11/30/magical-fun/","link":"","permalink":"http://kinano.top/2017/11/30/magical-fun/","excerpt":"自从php进入5.0版本以来，php以完全支持面向对象编程，使其开发效率愈加高效。同时其也引入了新的概念->魔术方法，以__开头的预定义方法，帮助我们更加高效进行程序地开发.","text":"自从php进入5.0版本以来，php以完全支持面向对象编程，使其开发效率愈加高效。同时其也引入了新的概念->魔术方法，以__开头的预定义方法，帮助我们更加高效进行程序地开发.1.__construct()构造方法，对象实例化时，让函数初始化。2.__destruct()析构函数，对象释放之前最后调用地函数，释放掉保存在对内存中的数据。3.__set()当对象中的成员为私有属性时，通过该方法可以直接设置成员属性的值4.__get()当对象的成员为私有属性时，通过该方法可以读取成员属性的值5.__isset()查看对象中私有属性是否存在6.__unset()直接删除对象中的私有属性7.__call()当对象调用类中不存在的方法时，可以通过类中的__call()方法来进行错误处理，防止程序报错终止8.__toString()当对对象进行输出时，调用该方法。比如echo \\$obj;否则，发生致命错误9.__clone()当我们克隆一个对象时，可以通过__clone()方法中的\\$this关键字对被克隆出来的对象进行初始化，而\\$that关键字可以对原对象进行操作。10.__autoload()众多魔术方法中唯一一个不在类中使用的方法，该方法可以自动加载包含文件for example12345678910111213141516171819202122232425one.class.php&lt;?php class one &#123; function one()&#123;&#125;; &#125;?&gt;two.class.php&lt;?php class two &#123; function twon()&#123;&#125;; &#125;?&gt;three.class.php&lt;?php class three &#123; function three()&#123;&#125; &#125;?&gt;test.php&lt;?php function __autoreload($classname)&#123; include &quot;./&quot;.$classname.&quot;class.php&quot;; &#125;?&gt;这样执行test.php文件就可以自动包含以上三个文件了。 11.__sleep()当我们对某个对象进行序列化时（serialize()）,自动调用该函数，在该方法中返回一个数组，数组有几个成员，就序列化该几个成员。12.__wakeup()当我们对某个二进制文件进行反序列化时(unserialize())，自动调用该函数,自动调用该函数，对反序列化生成的对象进行初始化。13.__debuginfo()打印调试信息，该方法只在php5.6以上版本可用 还有很多的魔术方法笔者还没介绍，读者如果感兴趣，可自行查阅php手册进行学习php在线手册","categories":[{"name":"-php","slug":"php","permalink":"http://kinano.top/categories/php/"}],"tags":[{"name":"php","slug":"php","permalink":"http://kinano.top/tags/php/"}]},{"title":"使用PHP生成二维码","slug":"PHP-QRcode","date":"2017-11-29T14:36:24.000Z","updated":"2017-11-29T15:08:39.753Z","comments":true,"path":"2017/11/29/PHP-QRcode/","link":"","permalink":"http://kinano.top/2017/11/29/PHP-QRcode/","excerpt":"一二维码在现实生活中经常用的到，但二维码如何生成的呢？现在我们就开始学习啦！","text":"一二维码在现实生活中经常用的到，但二维码如何生成的呢？现在我们就开始学习啦！ 二从网上下载相应的工具包，链接,下载解压phpqrcode并放到项目目录中去。 三首先我们需要引用需要的文件1include &apos;./phpqrcode/qrlib.php 然后调用png函数就可以生成了1QRcode::png($text);//$text二维码文本 其中png()的参数有如下几种12345参数$text表示生成二位的的信息文本；参数$outfile表示是否输出二维码图片 文件，默认否；参数$level表示容错率，也就是有被覆盖的区域还能识别，分别是 L（QR_ECLEVEL_L，7%），M（QR_ECLEVEL_M，15%），Q（QR_ECLEVEL_Q，25%），H（QR_ECLEVEL_H，30%）；参数$size表示生成图片大小，默认是3；参数$margin表示二维码周围边框空白区域间距值；参数$saveandprint表示是否保存二维码并显示。 代码示例1QRcode::png(&quot;kinano&quot;,&quot;./qrpic/kinano.png&quot;,$level = QR_ECLEVEL_H,$size = 4,$margin = 0,$saveandprint = true); 四我们可以利用二维码生成电子名片，然后用微信扫码功能就能得到名片信息了。首先让我们了解电子名片的基本格式，请点击了解后我们就可以编写一个简单的电子名片了12345678910111213$content = &apos;BEGIN:VCARD&apos;.&quot;\\n&quot;;$content.= &apos;VERSION:2,1&apos;.&quot;\\n&quot;;$content.= &apos;N:荒&apos;.&quot;\\n&quot;;//名片姓名$content.= &apos;FN:木超&apos;.&quot;\\n&quot;;//名片名字$content.= &apos;ORG:福建福州&apos;.&quot;\\n&quot;;//公司地址$content.= &apos;TEL;WORK;VOICE:18362985537&apos;.&quot;\\n&quot;;//工作电话$content.= &apos;TEL;HOME;VOICE:18362985537&apos;.&quot;\\n&quot;;//家庭电话$content.= &apos;TEL;TYPE=cell:18362985537&apos;.&quot;\\n&quot;;//移动电话$content.= &apos;ADR;HOME:福建福州&apos;.&quot;\\n&quot;;//地址$content.= &apos;EMAIL:1032467389@qq.com&apos;.&quot;\\n&quot;;//邮件$content.= &apos;URL:www.kinano.top&apos;.&quot;\\n&quot;;//个人网址$content.= &apos;END:VCARD&apos;.&quot;\\n&quot;;QRcode::png($content); 完成后用微信扫描就可以看到自己的电子名片了","categories":[{"name":"-php","slug":"php","permalink":"http://kinano.top/categories/php/"}],"tags":[{"name":"php","slug":"php","permalink":"http://kinano.top/tags/php/"},{"name":"二维码","slug":"二维码","permalink":"http://kinano.top/tags/二维码/"}]},{"title":"利用Hexo与github搭建方便的个人博客","slug":"CreateHexoBlog","date":"2017-11-25T01:12:58.000Z","updated":"2017-11-25T07:50:11.684Z","comments":true,"path":"2017/11/25/CreateHexoBlog/","link":"","permalink":"http://kinano.top/2017/11/25/CreateHexoBlog/","excerpt":"写在前面的话一直想做一个自己的博客，用来记录自己学习的点点滴滴，无奈个人懒癌晚期，一直行动不起来。现在逼迫自己写点东西来充实自己，上网查询了各个写博客的平台。总结下来，还是拥有一个自己私人博客比较酷炫，嗯，一句话，装逼很重要，审查什么的不存在的，自己就是站长了。又碍于自己资金有限，搭建服务器是一笔不小的开销，于是选择hexo+github来搭建自己的免费私人博客。好了，进入正题，开动了。^_^","text":"写在前面的话一直想做一个自己的博客，用来记录自己学习的点点滴滴，无奈个人懒癌晚期，一直行动不起来。现在逼迫自己写点东西来充实自己，上网查询了各个写博客的平台。总结下来，还是拥有一个自己私人博客比较酷炫，嗯，一句话，装逼很重要，审查什么的不存在的，自己就是站长了。又碍于自己资金有限，搭建服务器是一笔不小的开销，于是选择hexo+github来搭建自己的免费私人博客。好了，进入正题，开动了。^_^ github准备登陆github，如果没有账号烦请各位看官建立一下子啊。然后建立一个独有的仓库，仓库名为：你的用户名.github.io,比如我的github账号为huangmeideng,则我的仓库名为huangmeideng.github.io。 环境地搭建由于笔者的系统是windows的，因此以windows为例（mac与Linux系统更为简单，只需在自带的终端上操作便可，请读者自行查阅资料）。1.下载node.js并安装2.下载git for window并安装3.在硬盘上新建工作目录，比如我的工作目录，f:/HexoBlog/hexo 本地建立Hexohexo是一款基于github page的博客发布工具，如果讨厌我的博文可以查看它的官方文档手册，很方便哦。Hexo|文档安装完git后，我们可进入git bash命令终端，可以愉快地使用git了。12345$ npm install -g hexo-cli #安装hexo$ cd f:/HexoBlog/hexo #进入hexo文件保存目录$ hexo init #初始化hexo,这样我们在本地就搭建好hexo博客了$ hexo g #生成博客$ hexo s #本地启动hexo服务 这样我们就可以本地访问hexo博客了，我们在浏览器输入127.0.0.1:4000就可以访问了 与github仓库关联同样打开git bash客户端，使用如下命令建立git的ssh密钥1$ ssh-keygen -t rsa -C &quot;邮件地址&quot; 按照提示连按3次enter键建立密钥,打开用户目录下的.ssh\\id_rsa.pub，复制下来。接下来打开你的GitHub个人主页&gt;Settings&gt;SSH and GPG keys&gt;New SSH key,新建保存便可。测试链接是否成功1$ ssh -T git@github.com # 注意邮箱地址不用改 如果出现1Hi 你的用户名! You&apos;ve successfully authenticated, but GitHub does not provide shell access. 则链接成功然后再次配置如下12$ git config --global user.name &quot;huangmeidneg&quot;// 你的github用户名$ git config --global user.email &quot;huangmeideng@outlook.com&quot;// 填写你的github注册邮箱 大功告成接下来，配置hexo的链接方式,打开hexo的_config.yml配置文件(你也可以使用其他打开方式)12$ cd f:/HexoBlog/hexo$ vim _config.yml 找到如下配置信息，并更改123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repository: http://github.com/你的用户名/你的用户名.github.io.git branch: master 大功告成，接下来就可以上传到github了12$ hexo g$ hexo d #上传命令 这样你就可以通过你的用户名.github.io访问了 与域名绑定我通过阿里云购买域名，买了一个kinano.top域名，一年只需要2块钱哦。买完域名后在阿里云控制台&gt;产品与服务&gt;域名与网站&gt;域名&gt;选择购买的域名&gt;快速解析&gt;填写GitHub page的ipv4地址就行如何获得github page的地址1$ ping 你的用户名.github.io 就可获得，获得后复制进去便可自后，你还要在hexo工作目录下的source目录下新建CNAME文件，并填写你的域名进去。比如我的f:/HexoBlog/hexo/source/CNAME,内容为kinano.top然后再次执行12$ hexo g$ hexo d 这样我们就可以通过域名访问我们自己的博客啦！ 写博客对于Hexo,我们使用markdown文法来书写，关于markdown，可点击进行学习markdown文档再hexo工作目录下，我们通过如下命令进行新建文章1$ hexo new &apos;文章名&apos; 关于文章的详细信息，请参考Hexo|文档 美化博客Hexo 为我们提供了丰富多彩的主题，我们可以通过如下链接来查看已有主题Hexo|theme，并通过每个主题的文档来进行安装与使用，接下来就靠各位博主进行自主学习与美化了。不过，要记住，博客重要的是内容，万不可浪费时间再美化博客上，而要专注于博客内容的书写哦。","categories":[{"name":"-博客","slug":"博客","permalink":"http://kinano.top/categories/博客/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://kinano.top/tags/hexo/"},{"name":"github","slug":"github","permalink":"http://kinano.top/tags/github/"}]},{"title":"基于Vagrant搭建lnmp开发环境","slug":"Vagrant-lnmp","date":"2017-11-24T23:15:55.000Z","updated":"2017-11-30T17:05:07.952Z","comments":true,"path":"2017/11/25/Vagrant-lnmp/","link":"","permalink":"http://kinano.top/2017/11/25/Vagrant-lnmp/","excerpt":"前言使用vagrant搭建开发环境可以避免团队开发带来的开发环境不一致问题，避免了很多不必要的麻烦，同时其分发机制也也有利于新来的同事立即部署适合于公司的开发环境，非常便利，是很多互联网公司的首选。因此，学习如何搭建基于vagrant的开发环境是很有必要的。","text":"前言使用vagrant搭建开发环境可以避免团队开发带来的开发环境不一致问题，避免了很多不必要的麻烦，同时其分发机制也也有利于新来的同事立即部署适合于公司的开发环境，非常便利，是很多互联网公司的首选。因此，学习如何搭建基于vagrant的开发环境是很有必要的。 关于Vagrant 是一个简单易用的部署工具，用英文说应该是 Orchestration Tool 。它能帮助开发人员迅速的构建一个开发环境，帮助测试人员构建测试环境, Vagrant 基于 Ruby 开发，使用开源 VirtualBox 作为虚拟化支持，可以轻松的跨平台部署。 准备工作 vagrant安装 地址:https://www.vagrantup.com/downloads.html virtualbox安装 地址:https://www.virtualbox.org/wiki/Downloads xshell(如果你的开发机是window平台) 地址：http://www.netsarang.com/products/xsh_overview.html vagrant镜像 地址:http://pan.baidu.com/s/1eRP0rOA(如果你不喜欢，你也可以到官方选择下载自己喜欢的镜像 地址:http://www.vagrantbox.es) 建立自己的工作目录（笔者D:/vagrant）预备知识vagrant操作大多基于命令行，因此掌握几个常用命令对于后续的学习非常有用123456789101112131415161718192021vagrant box list #查看目前已有的boxvagrant box add #新增加一个boxvagrant box remove #删除指定boxvagrant init #初始化配置vagrantfilevagrant up #启动虚拟机vagrant ssh #ssh登陆虚拟机vagrant suspend #挂起虚拟机vagrant reload #重启虚拟机vagrant halt #关闭虚拟机vagrant status #查看虚拟机vagrant destory #删除虚拟机 部署环境1.安装基础环境打开XShell,输入vagrant -v查看vagrant是否安装成功 在你之前建立的工作目录建立一个虚拟机 查看已安装的box 初始化box并且打开虚拟机，进入虚拟机1vagrant init ubuntu1404 1vagrant up 1vagrant ssh 在window平台下vagrant ssh命令可能无法进入虚拟机，我们可以通过xshell客户端进行典型的window式进入 ####2.安装lnmp环境进入虚拟系统后先更换源，以便于快速下载需要的工具使用如下命令1sudo vim /etc/apt/sources.list 1sudo apt-get update 如果提示未安装vim，可使用命令1sudo apt-get install vim 安装php与相关扩展12345sudo apt-get install php5-clisudo apt-get install php-mcryptsudo apt-get install php-mysqlsudo apt-get install php-gdsudo apt-get install php5-cgi php5-fpm 检测是否安装成功1php -v 安装nginx1sudo apt-get install nginx 检测是否安装成功12nginx -vcurl -I &apos;127.0.0.1&apos; 安装mysql12sudo apt-get install mysql-serversudo apt-get install mysql-client 测试是否安装成功1mysql -uroot -p 至此，完成了一大部分。 3.配置lnmp环境配置php1sudo vim /etc/php5/fpm/pool.d/www.conf 将listen = /run/php5/php5-fpm.sock修改为listen = 127.0.0.1:9000然后重启sudo service php5-fpm restart配置nginx先备份default文件为default.bak,然后修改default文件，这样就可以在指定目录运行php项目了。 4.配置vagrantfile打开主机上的d:/vagrant/vagrangfile文件修改相关配置，让项目可以在主机的浏览器上运行同时实时同步文件共享操作12config.vm.network &quot;forwarded_port&quot;, guest:80, host:8888` 用于端口转发，这样我们就可以在主机浏览器通过连接http://127.0.0.1:8888访问nginx了1config.vm.network &quot;private_network&quot;,ip:&quot;192.168.199.101&quot; 用于网络配置，这样我们就不必通过端口转发进行访问，只需要http://192.168.101就行了1config.vm.synced_folder &quot;d:/phpcode&quot;,&quot;/home/www&quot; 用于目录共享，这样我们在主机上编写的项目就可以实时同步到开发环境中，非常方便对于/home/www目录，我们需要在虚拟机上建立1sudo mkdir /home/www 完成后重启虚拟机1vagrant reload 这样我们就完成了基于vagrant的lnmp开发环境的搭建现在我们建立一个php.php文件测试一下，如下图 5.打包分发1vagrant package --output xxx.box","categories":[{"name":"-运维","slug":"运维","permalink":"http://kinano.top/categories/运维/"}],"tags":[{"name":"php","slug":"php","permalink":"http://kinano.top/tags/php/"},{"name":"容器","slug":"容器","permalink":"http://kinano.top/tags/容器/"},{"name":"linux","slug":"linux","permalink":"http://kinano.top/tags/linux/"},{"name":"nginx","slug":"nginx","permalink":"http://kinano.top/tags/nginx/"},{"name":"mysql","slug":"mysql","permalink":"http://kinano.top/tags/mysql/"}]},{"title":"Linux学习","slug":"Linuxlearn","date":"2017-11-24T18:12:45.000Z","updated":"2017-11-25T05:16:38.213Z","comments":true,"path":"2017/11/25/Linuxlearn/","link":"","permalink":"http://kinano.top/2017/11/25/Linuxlearn/","excerpt":"Linux命令学习 一些常识命令格式命令 [选项][参数]","text":"Linux命令学习 一些常识命令格式命令 [选项][参数] 查询目录中的内容1ls [选项][文件或目录] 选项: -a 显示所有文件，包括隐藏文件 -l 显示详细信息 -d 查看目录属性 -h 人性化显示文件大小 -i 显示inode 权限操作1chmod + xxx eg:1chmod + 777,chmod + 755 常用目录说明 目录名 作用 / 根目录 /bin 命令保存目录 /boot 启动目录 /dev 设备文件保存目录 /etc 配置文件保存目录 /home 普通用户家目录 /root 超级用户家目录 /tmp 临时目录 /usr 系统软件资源目录 /var 系统相关文档内容保存目录 目录处理命令建立目录命令1mkdir -p [目录名] #-p，递归创建目录 切换目录1cd [目录] 简化操作1234cd ~ #进入当前用户的家目录cd - #进入上次目录cd .. #进入上级目录cd . #进入当前目录 删除目录删除空白目录1rmdir 删除目录1rm -rf [文件或目录] 选项： -r 删除目录 -f 强制 复制命令1cp [选项][源文件或目录][目标文件或目录] 选项： -r 复制目录 -d 若原文件是链接文件，则复制链接属性 -p 同时复制文件的属性 -a 相当于-pdr 剪切或重命名1mv [原文件或目录][目标目录] 链接命令1ln -s [原文件][目标文件] 功能： 生成链接文件 -s 创建软连接 搜索命令命令搜索命令1whereis [选项][命令名] 选项： -b：只查找可执行文件 -m: 只查找帮助文件 1which [文件名] #搜索命令所在路径与别名 文件搜索命令1locate [文件名] #在后台数据库中按文件名搜索，速度快 1/var/lib/mlocate #命令所在的后台数据库 1updatedb #更新数据库 1find [选项][搜索范围][搜索条件] #搜索条件可用通配符匹配,*匹配任意内容，?匹配任意字符,[]匹配任意括号内的内容 选项 -i 不区分大小写 -nouser 找出垃圾文件 -atime -/+时间 (eg:find /home/www php.php -atime +10)文件访问时间 -ctime 改变文件属性时间 -mtine 文件修改时间 -size -/+大小k/M 文件大小 1grep [选项][字符串][文件名] #在文件当中匹配符合条件的字符串 选项: -i 忽略大小写 -v 排除指定字符串 帮助命令1man [选项]命令 #获取指定命令的帮助 选项: -k 查看和命令相关的所有帮助 -数字 man的级别 压缩与解压命令.zip格式123zip 压缩文件名 原文件 #压缩文件zip -r 压缩文件名 源目录 #压缩目录unzip 压缩文件名 #解压缩文件 .gz格式12345gzip 原文件 #压缩为.gz的文件，原文件会消失gzip -c 原文件 &gt; 压缩文件 #保留原文件gzip -r 目录 #压缩目录下的所有子文件，当是不能压缩目录gzip -d 压缩文件 #解压.gz文件gunzip 压缩文件 #解压.gz文件 .bz2格式1234bzip2 压缩文件 #压缩为.bz2格式，不保留原文件bzip2 -k 原文件 #保留原文件bzip2 -d 压缩文件 #解压文件bunzip2 压缩文件 #解压文件 解打包文件12345tar -xvf 打包文件名 #先解压,然后解打包tar -zcvf 压缩包名.tar.gz 原文件 #压缩tar -zxvf 压缩包名.tar.gz #解压缩tar -jcvf 压缩包名.tar.bz2 原文件 #压缩tar -jxvf 压缩包名.tar.bz2 #解压缩 关机与重启命令1shutdown [选项]时间 选项: -c 取消前一个关机命令 -h 关机 -r 重启 其他关机命令123haltpoweroffinit 0 其他重启命令12rebootinit 6","categories":[{"name":"-运维","slug":"运维","permalink":"http://kinano.top/categories/运维/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://kinano.top/tags/Linux/"}]}]}