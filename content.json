{"meta":{"title":"kinano的博客","subtitle":"kinano","description":"程序员的个人博客，发布一系列有趣的东西","author":"kinano","url":"http://kinano.top"},"pages":[{"title":"标签","date":"2017-11-25T05:24:36.000Z","updated":"2017-11-25T05:25:08.515Z","comments":true,"path":"tags/index.html","permalink":"http://kinano.top/tags/index.html","excerpt":"","text":""},{"title":"分类","date":"2017-11-25T04:29:24.000Z","updated":"2017-11-25T04:46:19.109Z","comments":true,"path":"categories/index.html","permalink":"http://kinano.top/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"利用Hexo与github搭建方便的个人博客","slug":"CreateHexoBlog","date":"2017-11-25T01:12:58.000Z","updated":"2017-11-25T05:16:27.700Z","comments":true,"path":"2017/11/25/CreateHexoBlog/","link":"","permalink":"http://kinano.top/2017/11/25/CreateHexoBlog/","excerpt":"写在前面的话一直想做一个自己的博客，用来记录自己学习的点点滴滴，无奈个人懒癌晚期，一直行动不起来。现在逼迫自己写点东西来充实自己，上网查询了各个写博客的平台。总结下来，还是拥有一个自己私人博客比较酷炫，嗯，一句话，装逼很重要，审查什么的不存在的，自己就是站长了。又碍于自己资金有限，搭建服务器是一笔不小的开销，于是选择hexo+github来搭建自己的免费私人博客。好了，进入正题，开动了。\\^_\\^","text":"写在前面的话一直想做一个自己的博客，用来记录自己学习的点点滴滴，无奈个人懒癌晚期，一直行动不起来。现在逼迫自己写点东西来充实自己，上网查询了各个写博客的平台。总结下来，还是拥有一个自己私人博客比较酷炫，嗯，一句话，装逼很重要，审查什么的不存在的，自己就是站长了。又碍于自己资金有限，搭建服务器是一笔不小的开销，于是选择hexo+github来搭建自己的免费私人博客。好了，进入正题，开动了。\\^_\\^ github准备登陆github，如果没有账号烦请各位看官建立一下子啊。然后建立一个独有的仓库，仓库名为：你的用户名.github.io,比如我的github账号为huangmeideng,则我的仓库名为huangmeideng.github.io。 环境地搭建由于笔者的系统是windows的，因此以windows为例（mac与Linux系统更为简单，只需在自带的终端上操作便可，请读者自行查阅资料）。1.下载node.js并安装2.下载git for window并安装3.在硬盘上新建工作目录，比如我的工作目录，f:/HexoBlog/hexo 本地建立Hexohexo是一款基于github page的博客发布工具，如果讨厌我的博文可以查看它的官方文档手册，很方便哦。Hexo|文档安装完git后，我们可进入git bash命令终端，可以愉快地使用git了。12345$ npm install -g hexo-cli #安装hexo$ cd f:/HexoBlog/hexo #进入hexo文件保存目录$ hexo init #初始化hexo,这样我们在本地就搭建好hexo博客了$ hexo g #生成博客$ hexo s #本地启动hexo服务 这样我们就可以本地访问hexo博客了，我们在浏览器输入127.0.0.1:4000就可以访问了 与github仓库关联同样打开git bash客户端，使用如下命令建立git的ssh密钥1$ ssh-keygen -t rsa -C &quot;邮件地址&quot; 按照提示连按3次enter键建立密钥,打开用户目录下的.ssh\\id_rsa.pub，复制下来。接下来打开你的GitHub个人主页&gt;Settings&gt;SSH and GPG keys&gt;New SSH key,新建保存便可。测试链接是否成功1$ ssh -T git@github.com # 注意邮箱地址不用改 如果出现1Hi 你的用户名! You&apos;ve successfully authenticated, but GitHub does not provide shell access. 则链接成功然后再次配置如下12$ git config --global user.name &quot;huangmeidneg&quot;// 你的github用户名$ git config --global user.email &quot;huangmeideng@outlook.com&quot;// 填写你的github注册邮箱 大功告成接下来，配置hexo的链接方式,打开hexo的_config.yml配置文件(你也可以使用其他打开方式)12$ cd f:/HexoBlog/hexo$ vim _config.yml 找到如下配置信息，并更改123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repository: http://github.com/你的用户名/你的用户名.github.io.git branch: master 大功告成，接下来就可以上传到github了12$ hexo g$ hexo d #上传命令 这样你就可以通过你的用户名.github.io访问了 与域名绑定我通过阿里云购买域名，买了一个kinano.top域名，一年只需要2块钱哦。买完域名后在阿里云控制台&gt;产品与服务&gt;域名与网站&gt;域名&gt;选择购买的域名&gt;快速解析&gt;填写GitHub page的ipv4地址就行如何获得github page的地址1$ ping 你的用户名.github.io 就可获得，获得后复制进去便可自后，你还要在hexo工作目录下的source目录下新建CNAME文件，并填写你的域名进去。比如我的f:/HexoBlog/hexo/source/CNAME,内容为kinano.top然后再次执行12$ hexo g$ hexo d 这样我们就可以通过域名访问我们自己的博客啦！ 写博客对于Hexo,我们使用markdown文法来书写，关于markdown，可点击进行学习markdown文档再hexo工作目录下，我们通过如下命令进行新建文章1$ hexo new &apos;文章名&apos; 关于文章的详细信息，请参考Hexo|文档 美化博客Hexo 为我们提供了丰富多彩的主题，我们可以通过如下链接来查看已有主题Hexo|theme，并通过每个主题的文档来进行安装与使用，接下来就靠各位博主进行自主学习与美化了。不过，要记住，博客重要的是内容，万不可浪费时间再美化博客上，而要专注于博客内容的书写哦。","categories":[{"name":"-博客","slug":"博客","permalink":"http://kinano.top/categories/博客/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://kinano.top/tags/hexo/"},{"name":"github","slug":"github","permalink":"http://kinano.top/tags/github/"}]},{"title":"基于Vagrant搭建lnmp开发环境","slug":"Vagrant-lnmp","date":"2017-11-24T23:15:55.000Z","updated":"2017-11-25T05:17:23.742Z","comments":true,"path":"2017/11/25/Vagrant-lnmp/","link":"","permalink":"http://kinano.top/2017/11/25/Vagrant-lnmp/","excerpt":"前言使用vagrant搭建开发环境可以避免团队开发带来的开发环境不一致问题，避免了很多不必要的麻烦，同时其分发机制也也有利于新来的同事立即部署适合于公司的开发环境，非常便利，是很多互联网公司的首选。因此，学习如何搭建基于vagrant的开发环境是很有必要的。","text":"前言使用vagrant搭建开发环境可以避免团队开发带来的开发环境不一致问题，避免了很多不必要的麻烦，同时其分发机制也也有利于新来的同事立即部署适合于公司的开发环境，非常便利，是很多互联网公司的首选。因此，学习如何搭建基于vagrant的开发环境是很有必要的。 关于Vagrant 是一个简单易用的部署工具，用英文说应该是 Orchestration Tool 。它能帮助开发人员迅速的构建一个开发环境，帮助测试人员构建测试环境, Vagrant 基于 Ruby 开发，使用开源 VirtualBox 作为虚拟化支持，可以轻松的跨平台部署。 准备工作 vagrant安装 地址:https://www.vagrantup.com/downloads.html virtualbox安装 地址:https://www.virtualbox.org/wiki/Downloads xshell(如果你的开发机是window平台) 地址：http://www.netsarang.com/products/xsh_overview.html vagrant镜像 地址:http://pan.baidu.com/s/1eRP0rOA(如果你不喜欢，你也可以到官方选择下载自己喜欢的镜像 地址:http://www.vagrantbox.es) 建立自己的工作目录（笔者D:/vagrant）预备知识vagrant操作大多基于命令行，因此掌握几个常用命令对于后续的学习非常有用123456789101112131415161718192021vagrant box list #查看目前已有的boxvagrant box add #新增加一个boxvagrant box remove #删除指定boxvagrant init #初始化配置vagrantfilevagrant up #启动虚拟机vagrant ssh #ssh登陆虚拟机vagrant suspend #挂起虚拟机vagrant reload #重启虚拟机vagrant halt #关闭虚拟机vagrant status #查看虚拟机vagrant destory #删除虚拟机 部署环境1.安装基础环境打开XShell,输入vagrant -v查看vagrant是否安装成功 在你之前建立的工作目录建立一个虚拟机 查看已安装的box 初始化box并且打开虚拟机，进入虚拟机1vagrant init ubuntu1404 1vagrant up 1vagrant ssh 在window平台下vagrant ssh命令可能无法进入虚拟机，我们可以通过xshell客户端进行典型的window式进入 ####2.安装lnmp环境进入虚拟系统后先更换源，以便于快速下载需要的工具使用如下命令1sudo vim /etc/apt/sources.list 1sudo apt-get update 如果提示未安装vim，可使用命令1sudo apt-get install vim 安装php与相关扩展12345sudo apt-get install php5-clisudo apt-get install php-mcryptsudo apt-get install php-mysqlsudo apt-get install php-gdsudo apt-get install php5-cgi php5-fpm 检测是否安装成功1php -v 安装nginx1sudo apt-get install nginx 检测是否安装成功12nginx -vcurl -I &apos;127.0.0.1&apos; 安装mysql12sudo apt-get install mysql-serversudo apt-get install mysql-client 测试是否安装成功1mysql -uroot -p 至此，完成了一大部分。 3.配置lnmp环境配置php1sudo vim /etc/php5/fpm/pool.d/www.conf 将listen = /run/php5/php5-fpm.sock修改为listen = 127.0.0.1:9000然后重启sudo service php5-fpm restart配置nginx先备份default文件为default.bak,然后修改default文件，这样就可以在指定目录运行php项目了。 4.配置vagrantfile打开主机上的d:/vagrant/vagrangfile文件修改相关配置，让项目可以在主机的浏览器上运行同时实时同步文件共享操作12config.vm.network &quot;forwarded_port&quot;, guest:80, host:8888` 用于端口转发，这样我们就可以在主机浏览器通过连接http://127.0.0.1:8888访问nginx了1config.vm.network &quot;private_network&quot;,ip:&quot;192.168.199.101&quot; 用于网络配置，这样我们就不必通过端口转发进行访问，只需要http://192.168.101就行了1config.vm.synced_folder &quot;d:/phpcode&quot;,&quot;/home/www&quot; 用于目录共享，这样我们在主机上编写的项目就可以实时同步到开发环境中，非常方便对于/home/www目录，我们需要在虚拟机上建立1sudo mkdir /home/www 完成后重启虚拟机1vagrant reload 这样我们就完成了基于vagrant的lnmp开发环境的搭建现在我们建立一个php.php文件测试一下，如下图 5.打包分发1vagrant package --output xxx.box","categories":[{"name":"-运维","slug":"运维","permalink":"http://kinano.top/categories/运维/"}],"tags":[{"name":"容器","slug":"容器","permalink":"http://kinano.top/tags/容器/"},{"name":"linux","slug":"linux","permalink":"http://kinano.top/tags/linux/"},{"name":"nginx","slug":"nginx","permalink":"http://kinano.top/tags/nginx/"},{"name":"php","slug":"php","permalink":"http://kinano.top/tags/php/"},{"name":"mysql","slug":"mysql","permalink":"http://kinano.top/tags/mysql/"}]},{"title":"Linux学习","slug":"Linuxlearn","date":"2017-11-24T18:12:45.000Z","updated":"2017-11-25T05:16:38.213Z","comments":true,"path":"2017/11/25/Linuxlearn/","link":"","permalink":"http://kinano.top/2017/11/25/Linuxlearn/","excerpt":"Linux命令学习 一些常识命令格式命令 [选项][参数]","text":"Linux命令学习 一些常识命令格式命令 [选项][参数] 查询目录中的内容1ls [选项][文件或目录] 选项: -a 显示所有文件，包括隐藏文件 -l 显示详细信息 -d 查看目录属性 -h 人性化显示文件大小 -i 显示inode 权限操作1chmod + xxx eg:1chmod + 777,chmod + 755 常用目录说明 目录名 作用 / 根目录 /bin 命令保存目录 /boot 启动目录 /dev 设备文件保存目录 /etc 配置文件保存目录 /home 普通用户家目录 /root 超级用户家目录 /tmp 临时目录 /usr 系统软件资源目录 /var 系统相关文档内容保存目录 目录处理命令建立目录命令1mkdir -p [目录名] #-p，递归创建目录 切换目录1cd [目录] 简化操作1234cd ~ #进入当前用户的家目录cd - #进入上次目录cd .. #进入上级目录cd . #进入当前目录 删除目录删除空白目录1rmdir 删除目录1rm -rf [文件或目录] 选项： -r 删除目录 -f 强制 复制命令1cp [选项][源文件或目录][目标文件或目录] 选项： -r 复制目录 -d 若原文件是链接文件，则复制链接属性 -p 同时复制文件的属性 -a 相当于-pdr 剪切或重命名1mv [原文件或目录][目标目录] 链接命令1ln -s [原文件][目标文件] 功能： 生成链接文件 -s 创建软连接 搜索命令命令搜索命令1whereis [选项][命令名] 选项： -b：只查找可执行文件 -m: 只查找帮助文件 1which [文件名] #搜索命令所在路径与别名 文件搜索命令1locate [文件名] #在后台数据库中按文件名搜索，速度快 1/var/lib/mlocate #命令所在的后台数据库 1updatedb #更新数据库 1find [选项][搜索范围][搜索条件] #搜索条件可用通配符匹配,*匹配任意内容，?匹配任意字符,[]匹配任意括号内的内容 选项 -i 不区分大小写 -nouser 找出垃圾文件 -atime -/+时间 (eg:find /home/www php.php -atime +10)文件访问时间 -ctime 改变文件属性时间 -mtine 文件修改时间 -size -/+大小k/M 文件大小 1grep [选项][字符串][文件名] #在文件当中匹配符合条件的字符串 选项: -i 忽略大小写 -v 排除指定字符串 帮助命令1man [选项]命令 #获取指定命令的帮助 选项: -k 查看和命令相关的所有帮助 -数字 man的级别 压缩与解压命令.zip格式123zip 压缩文件名 原文件 #压缩文件zip -r 压缩文件名 源目录 #压缩目录unzip 压缩文件名 #解压缩文件 .gz格式12345gzip 原文件 #压缩为.gz的文件，原文件会消失gzip -c 原文件 &gt; 压缩文件 #保留原文件gzip -r 目录 #压缩目录下的所有子文件，当是不能压缩目录gzip -d 压缩文件 #解压.gz文件gunzip 压缩文件 #解压.gz文件 .bz2格式1234bzip2 压缩文件 #压缩为.bz2格式，不保留原文件bzip2 -k 原文件 #保留原文件bzip2 -d 压缩文件 #解压文件bunzip2 压缩文件 #解压文件 解打包文件12345tar -xvf 打包文件名 #先解压,然后解打包tar -zcvf 压缩包名.tar.gz 原文件 #压缩tar -zxvf 压缩包名.tar.gz #解压缩tar -jcvf 压缩包名.tar.bz2 原文件 #压缩tar -jxvf 压缩包名.tar.bz2 #解压缩 关机与重启命令1shutdown [选项]时间 选项: -c 取消前一个关机命令 -h 关机 -r 重启 其他关机命令123haltpoweroffinit 0 其他重启命令12rebootinit 6","categories":[{"name":"-运维","slug":"运维","permalink":"http://kinano.top/categories/运维/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://kinano.top/tags/Linux/"}]}]}